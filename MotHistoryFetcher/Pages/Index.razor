@page "/"
@using System.Text.RegularExpressions
@using MotHistoryFetcher
@inject MotHistoryService MotHistoryService
@inject IJSRuntime JSRuntime

<PageTitle>Mot History</PageTitle>
<div class="content-center">
    <h1>Search MOT History</h1>

    <form @onsubmit="Search">
        <input id="registrationNumber" @bind:event="oninput" @bind:get="registrationNumber" @bind:set="OnInput" aria-label="Registration Number" placeholder="Registration Number" />

        <button class="btn btn-primary" @onclick="Search" aria-label="Search">
            <i class="fas @buttonClass"></i>
        </button>
    </form>
    @if (invalidReg)
    {
        <div class="error-message">
            <p>Not a valid Registration Number</p>
        </div>
    }
    @if (contactApiFailed)
    {
        <div class="error-message">
            <p>Unable to retreive vehicle details: Connection refused</p>
        </div>
    }
    @if (history != null)
    {
        <div class="mot-history">
            <div class="header">
                <h6>Vehicle Details</h6>
            </div>
            <div class="body">
                <table role="table">
                    <tbody role="rowgroup">
                        <tr role="row">
                            <th role="rowheader" scope="row">Make</th>
                            <td role="cell">@history.Make</td>
                        </tr>
                        <tr role="row">
                            <th role="rowheader" scope="row">Model</th>
                            <td role="cell">@history.Model</td>
                        </tr>
                        <tr role="row">
                            <th role="rowheader" scope="row">Colour</th>
                            <td role="cell">@history.PrimaryColour</td>
                        </tr>
                        <tr role="row">
                            <th role="rowheader" scope="row">Fuel Type</th>
                            <td role ="cell">@history.FuelType</td>
                        </tr>
                        <tr role="row">
                            <th role="rowheader" scope="row">MOT Expiry Date</th>
                            <td role="cell">@history.MotExpiryDateString</td>
                        </tr>
                        <tr role="row">
                            <th role="rowheader" scope="row">Mileage at last MOT</th>
                            <td role="cell">@history.MileageAtLastMot</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>



@code {
    private string registrationNumber = string.Empty;
    private MotHistory? history;
    private bool invalidReg = false;
    private bool contactApiFailed = false;
    private string buttonClass = "fa-search";

    private async Task Search()
    {
        buttonClass = "fa-spin fa-spinner";
        invalidReg = false;
        contactApiFailed = false;
        if (!string.IsNullOrWhiteSpace(registrationNumber))
        {
            var searchResults = await MotHistoryService.SearchByRegistrationAsync(registrationNumber);
            if (searchResults == null)
            {
                contactApiFailed = true;
                history = null;
                buttonClass = "fa-search";
                return;
            }
            if (searchResults?.Count != 1)
            {
                invalidReg = true;
                history = null;
                buttonClass = "fa-search";
                return;
            }
            history = searchResults.First();
        }
        buttonClass = "fa-search";
    }

    private void OnInput(string? value)
    {
        if (value == null) return;
        // Convert to uppercase and remove non-alphanumeric characters
        registrationNumber = Regex.Replace(value.ToUpper(), @"[^a-zA-Z0-9\s]", "");
        if (String.IsNullOrEmpty(registrationNumber))
        {
            invalidReg = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("focusInput", "registrationNumber");
        }
    }
}
