@page "/"
@using System.Text.RegularExpressions
@using MotHistoryFetcher
@inject MotHistoryService MotHistoryService
@inject IJSRuntime JSRuntime

<PageTitle>Mot History</PageTitle>
<div class="content-center">
    <h1>Search MOT History</h1>

    <form @onsubmit="Search">
        <input id="registrationNumber" @bind="@registrationNumber" @oninput="OnInput" aria-label="Registration Number" placeholder="Registration Number"/>

        <button class="btn btn-primary" @onclick="Search" aria-label="Search">
            <i class="fas @buttonClass"></i>
        </button>
    </form>
    @if (invalidReg)
    {
        <div class="error-message">
            <p>Not a valid Registration Number</p>
        </div>
    }
    @if (history != null)
    {
        <div class="mot-history">
            <div class="header">
                <h6>Vehicle Details</h6>
            </div>
            <div class="body">
                <table>
                    <tbody>
                        <tr>
                            <td>Make</td>
                            <td>@history.Make</td>
                        </tr>
                        <tr>
                            <td>Model</td>
                            <td>@history.Model</td>
                        </tr>
                        <tr>
                            <td>Colour</td>
                            <td>@history.PrimaryColour</td>
                        </tr>
                        <tr>
                            <td>Fuel Type</td>
                            <td>@history.FuelType</td>
                        </tr>
                        <tr>
                            <td>MOT Expiry Date</td>
                            <td>@history.MotExpiryDateString</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>



@code {
    private string registrationNumber;
    private MotHistory? history;
    private bool invalidReg;
    private string buttonClass = "fa-search";

    private async Task Search()
    {
        buttonClass = "fa-spin fa-spinner";
        invalidReg = false;
        if (!string.IsNullOrWhiteSpace(registrationNumber))
        {
            var searchResults = await MotHistoryService.SearchByRegistrationAsync(registrationNumber);
            if (searchResults.Count != 1)
            {
                invalidReg = true;
                history = null;
                buttonClass = "fa-search";
                return;
            }
            history = searchResults.First();
        }
        buttonClass = "fa-search";
    }

    private void OnInput(ChangeEventArgs e)
    {
        // Convert to uppercase and remove non-alphanumeric characters
        registrationNumber = Regex.Replace(e.Value.ToString().ToUpper(), @"[^a-zA-Z0-9\s]", "");
        if (String.IsNullOrEmpty(registrationNumber))
        {
            invalidReg = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("focusInput", "registrationNumber");
        }
    }
}
